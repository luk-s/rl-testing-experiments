from pathlib import Path
from typing import Dict, List, Tuple

import matplotlib.pyplot as plt
import pandas as pd

from rl_testing.util.engine import MoveStat, NodeStat
from rl_testing.util.util import fen_to_file_name

IMAGE_DIRECTORY = Path(__file__).parent / Path("images")
RESULT_DIRECTORY = Path(__file__).parent.parent / Path("results")


def load_log_data(file_path: Path) -> Tuple[Dict[str, Dict[str, List[NodeStat]]], List[str]]:
    # Read all lines of the result file
    with open(file_path, "r") as f:
        lines = f.readlines()

    line_index = 0

    # We are not interested in the first few config lines, except for the two network paths
    network_mapping = {}
    while "network_path" not in lines[line_index]:
        line_index += 1
    network_mapping["MODEL: 1"] = lines[line_index].split(" = ")[1].strip()
    network_mapping["MODEL: 2"] = lines[line_index + 1].split(" = ")[1].strip()
    network_names = [network_mapping[key] for key in network_mapping]

    # Initialize the result dictionary
    result_dict: Dict[str, Dict[str, List[NodeStat]]] = {}

    # Consume all lines until the first empty line
    while lines[line_index].strip() != "":
        line_index += 1

    # Discard all lines until the first empty line
    lines = lines[line_index + 1 :]
    current_fen = None
    current_network = None
    move_stats = []

    # Iterate over all lines
    for line in lines:
        if "FEN:" in line:
            # This is a new fen
            current_fen = line.split("FEN: ")[1].strip()
            result_dict[current_fen] = {}
            current_network = None
        elif "MODEL:" in line:
            # This is a new network
            current_network = network_mapping[line.strip()]
            result_dict[current_fen][current_network] = []
        elif "MoveStat" in line:
            # This is a new move stat
            move_stats.append(MoveStat.from_string(line))
        elif "NodeStat" in line:
            # This is a new node stat
            node_stat = NodeStat.from_string(line, move_stats=move_stats)
            move_stats = []
            result_dict[current_fen][current_network].append(node_stat)
        else:
            # This should not happen
            raise ValueError(f"Unknown line: {line}")

    del lines
    return result_dict, network_names


if __name__ == "__main__":
    ################
    # CONFIG START #
    ################
    result_folder = RESULT_DIRECTORY / Path("differential_testing/main_results")
    result_folder_stockfish = RESULT_DIRECTORY / Path("board_analysis")
    result_file = Path(
        "STRANGE_results_ENGINE_remote_full_logs_400_nodes_DATA_interesting_fen_database.node_stats.txt"
    )
    result_file_stockfish = Path("logs_board_analysis.csv")
    image_subdirectory = "full_logs/400_nodes"
    ################
    #  CONFIG END  #
    ################

    # Create the image directory if it does not exist
    image_directory = IMAGE_DIRECTORY / Path(image_subdirectory)
    image_directory.mkdir(parents=True, exist_ok=True)

    # Load the log data
    log_data, network_names = load_log_data(result_folder / result_file)

    print("Done")

    # Load the stockfish scores
    stockfish_scores = pd.read_csv(result_folder_stockfish / result_file_stockfish)
    stockfish_scores["fen"] = stockfish_scores["fen"].str.strip()

    # Create one plot per fen
    for fen in log_data:
        print(f"Processing {fen}")

        # Create the image
        fig, ax = plt.subplots()
        ax.set_title(f"Position: {fen}")
        ax.set_xlabel("Search tree size")
        ax.set_ylabel("Value of the root node")
        ax.set_ylim(-1.1, 1.1)
        ax.grid(True)
        for network in log_data[fen]:
            node_stats = log_data[fen][network]
            x_values = list(map(lambda node_stat: node_stat.visits, node_stats))
            y_values = list(map(lambda node_stat: node_stat.q_value, node_stats))
            if " b " in fen:
                y_values = [-y for y in y_values]

            # TODO: I'm not sure how this can happen, but it does and it needs to be fixed
            if x_values[0] > x_values[1]:
                x_values = x_values[1:]
                y_values = y_values[1:]

            ax.plot(
                x_values,
                y_values,
                label=network[:7],
            )

        # Plot the true score generated by stockfish
        stockfish_score = stockfish_scores.loc[stockfish_scores["fen"] == fen, "score"].values[0]
        if " b " in fen:
            stockfish_score = -stockfish_score
        assert 390 <= x_values[-1] <= 410
        ax.hlines(
            stockfish_score,
            0,
            x_values[-1],
            label="True score (Stockfish)",
            color="black",
            linestyle="dashed",
        )

        ax.legend()
        plt.tight_layout()

        fig.savefig(
            image_directory / Path(f"{fen_to_file_name(fen)}.png"), bbox_inches="tight", dpi=150
        )
        plt.close(fig)
