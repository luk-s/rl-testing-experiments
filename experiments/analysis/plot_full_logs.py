from pathlib import Path
from typing import Any, Dict, List, Tuple

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

from rl_testing.util.chess import fen_to_file_name
from rl_testing.util.engine import MoveStat, NodeStat

IMAGE_DIRECTORY = Path(__file__).parent / Path("images")
RESULT_DIRECTORY = Path(__file__).parent.parent / Path("results")

Fen = str
NetworkName = str
Average = float
Std = float


def load_log_data(file_path: Path) -> Tuple[Dict[Fen, List[NodeStat]], NetworkName]:
    # Read all lines of the result file
    with open(file_path, "r") as f:
        line = f.readline()

        # We are not interested in the first few config lines, except for the network name
        while "network_name" not in line:
            line = f.readline()
        network_name = line.split(" = ")[1].strip().split("-")[0].strip()

        # Initialize the result dictionary
        result_dict: Dict[str, List[NodeStat]] = {}

        # Consume all lines including the first empty line
        while line != "":
            line = f.readline().strip()
        line = f.readline().strip()

        current_fen = None
        move_stats = []

        # Iterate over all lines
        while line != "":
            if "FEN:" in line:
                # This is a new fen
                current_fen = line.split("FEN: ")[1]
                result_dict[current_fen] = []
            elif "MODEL:" in line:
                pass
            elif "MoveStat" in line:
                # This is a new move stat
                move_stats.append(MoveStat.from_string(line))
            elif "NodeStat" in line:
                # This is a new node stat
                node_stat = NodeStat.from_string(line, move_stats=move_stats)
                move_stats = []
                result_dict[current_fen].append(node_stat)
            else:
                # This should not happen
                raise ValueError(f"Unknown line: {line}")

            line = f.readline().strip()

    return result_dict, network_name


def plot_full_logs(
    log_data: Dict[Fen, Dict[NetworkName, List[NodeStat]]],
    stockfish_scores: pd.DataFrame,
    image_directory: Path,
    models_ordered: List[NetworkName],
    model_color_map: Dict[NetworkName, Any],
):
    # Create the image directory if it does not exist
    image_directory.mkdir(parents=True, exist_ok=True)

    # Create one plot per fen
    for fen in log_data:
        print(f"Processing {fen}")

        # Create the image
        fig, ax = plt.subplots()
        ax.set_title(f"Position: {fen}")
        ax.set_xlabel("Search tree size")
        ax.set_ylabel("Value of the root node")
        ax.set_ylim(-1.1, 1.1)
        ax.grid(True)
        for network_name in models_ordered:
            if network_name not in log_data[fen]:
                continue
            node_stats = log_data[fen][network_name]
            x_values = list(map(lambda node_stat: node_stat.visits, node_stats))
            y_values = list(map(lambda node_stat: node_stat.q_value, node_stats))
            if " b " in fen:
                y_values = [-y for y in y_values]

            # TODO: I'm not sure how this can happen, but it does and it needs to be fixed
            if x_values[0] > x_values[1]:
                x_values = x_values[1:]
                y_values = y_values[1:]

            ax.plot(
                x_values,
                y_values,
                label=network_name,
                color=model_color_map[network_name],
            )

        # Plot the true score generated by stockfish
        stockfish_score = stockfish_scores.loc[stockfish_scores["fen"] == fen, "score"].values[0]
        if " b " in fen:
            stockfish_score = -stockfish_score
        assert 390 <= x_values[-1] <= 410
        ax.hlines(
            stockfish_score,
            0,
            x_values[-1],
            label="True score (Stockfish)",
            color="black",
            linestyle="dashed",
        )

        ax.legend()
        plt.tight_layout()

        fig.savefig(
            image_directory / Path(f"{fen_to_file_name(fen)}.png"), bbox_inches="tight", dpi=150
        )
        plt.close(fig)


def plot_average_stockfish_deviation(
    log_data: Dict[Fen, Dict[NetworkName, List[NodeStat]]],
    stockfish_scores: pd.DataFrame,
    image_directory: Path,
    models_ordered: List[NetworkName],
    model_color_map: Dict[NetworkName, Any],
    x_value_max: int = 400,
):
    # Create the image directory if it does not exist
    image_directory.mkdir(parents=True, exist_ok=True)

    # Create and populate the result dictionary
    all_data_dict: Dict[NetworkName, List[List[float]]] = {}
    result_dict: Dict[NetworkName, Tuple[List[Average], List[Std]]] = {}
    for network_name in models_ordered:
        all_data_dict[network_name] = []
        all_data_dict[network_name] = [[] for _ in range(x_value_max)]

    # Summarize data over all fens
    for fen in log_data:
        print(f"Processing {fen}")

        # Extract the stockfish score
        stockfish_score = stockfish_scores.loc[stockfish_scores["fen"] == fen, "score"].values[0]
        if " b " in fen:
            stockfish_score = -stockfish_score

        # Compute deviation from stockfish score for each fen
        for network_name in models_ordered:
            if network_name not in log_data[fen]:
                continue
            node_stats = log_data[fen][network_name]
            x_values = list(map(lambda node_stat: node_stat.visits, node_stats))
            y_values = list(map(lambda node_stat: node_stat.q_value, node_stats))
            if " b " in fen:
                y_values = [-y for y in y_values]

            # Compute absolute deviation of y_values from stockfish score
            deviations = [abs(y - stockfish_score) for y in y_values]

            # TODO: I'm not sure how this can happen, but it does and it needs to be fixed
            if x_values[0] > x_values[1]:
                x_values = x_values[1:]
                deviations = deviations[1:]

            # Add the deviations to the result dictionary
            for x, deviation in zip(x_values, deviations):
                if x > x_value_max:
                    break
                all_data_dict[network_name][x - 1].append(deviation)

            assert 390 <= x_values[-1] <= 410

    # For each model, compute the average deviation for each x value over all fens
    for network_name in models_ordered:
        averages = []
        stds = []
        for x in range(x_value_max):
            averages.append(np.mean(all_data_dict[network_name][x]))
            stds.append(np.std(all_data_dict[network_name][x]))

        result_dict[network_name] = (averages, stds)

    # Create the image
    fig, ax = plt.subplots()
    ax.set_title(f"Average deviation from Stockfish score")
    ax.set_xlabel("Search tree size")
    ax.set_ylabel("Average deviation from Stockfish score")
    ax.set_ylim(-0.1, 2)
    ax.grid(True)

    for network_name in models_ordered:
        ax.plot(
            range(1, x_value_max + 1),
            result_dict[network_name][0][:x_value_max],
            label=network_name,
            color=model_color_map[network_name],
        )

    ax.legend()
    plt.tight_layout()

    fig.savefig(
        image_directory / Path(f"summary_plot_{x_value_max}_nodes.png"),
        bbox_inches="tight",
        dpi=150,
    )

    # Add standard deviations to the same plot and save it again
    for network_name in models_ordered:
        ax.fill_between(
            range(1, x_value_max + 1),
            np.array(result_dict[network_name][0][:x_value_max])
            - np.array(result_dict[network_name][1][:x_value_max]),
            np.array(result_dict[network_name][0][:x_value_max])
            + np.array(result_dict[network_name][1][:x_value_max]),
            alpha=0.2,
            color=model_color_map[network_name],
        )

    fig.savefig(
        image_directory / Path(f"summary_plot_{x_value_max}_nodes_std.png"),
        bbox_inches="tight",
        dpi=150,
    )

    plt.close(fig)


if __name__ == "__main__":
    ################
    # CONFIG START #
    ################
    result_folder = RESULT_DIRECTORY / Path("score_positions")
    result_folder_stockfish = RESULT_DIRECTORY / Path("board_analysis")
    result_file_patterns = [
        "results_ENGINE_local_full_logs_400_nodes_DATA_interesting_fen_database_NETWORK*"
    ]
    result_file_stockfish = Path("logs_board_analysis.csv")
    image_subdirectory = "full_logs/400_nodes_combined"
    image_subdirectory2 = "full_logs/400_nodes_average_deviation"

    color_map = matplotlib.cm.get_cmap("RdPu")

    model_color_map: Dict[NetworkName, Any] = {
        "T608927": color_map(0.2),
        "T611246": color_map(0.36),
        "T771717": color_map(0.52),
        "T785469": color_map(0.68),
        "T807301": color_map(0.84),
        "T807785": color_map(1.0),
    }

    models_ordered = list(model_color_map.keys())

    ################
    #  CONFIG END  #
    ################

    # Create the image directory if it does not exist
    image_directory = IMAGE_DIRECTORY / Path(image_subdirectory)
    image_directory2 = IMAGE_DIRECTORY / Path(image_subdirectory2)

    # Iterate over the result folder and find all result files which match the pattern
    result_files: List[Path] = []
    for result_file_pattern in result_file_patterns:
        result_files.extend(result_folder.glob(result_file_pattern))

    # Remove all files which don't end with node_stats.txt
    result_files = [
        result_file for result_file in result_files if result_file.name.endswith("node_stats.txt")
    ]

    # Load the log data
    result_data: Dict[Fen, Dict[NetworkName, List[NodeStat]]] = {}
    for result_file in result_files:
        print(f"Loading {result_file}")
        log_data, network_name = load_log_data(result_folder / result_file)
        for fen in log_data:
            if fen not in result_data:
                result_data[fen] = {}
            result_data[fen][network_name] = log_data[fen]

    # Load the stockfish scores
    stockfish_scores = pd.read_csv(result_folder_stockfish / result_file_stockfish)
    stockfish_scores["fen"] = stockfish_scores["fen"].str.strip()

    # plot_full_logs(result_data, stockfish_scores, image_directory, models_ordered, model_color_map)

    plot_average_stockfish_deviation(
        result_data, stockfish_scores, image_directory2, models_ordered, model_color_map
    )
